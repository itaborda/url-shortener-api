package com.itaborda.controller;

import com.itaborda.exception.InvalidAddressException;
import com.itaborda.exception.KeyNotFoundException;
import com.itaborda.exception.KeyOverFlowException;
import com.itaborda.controller.dto.BaseResponse;
import com.itaborda.controller.dto.NewLinkDto;
import com.itaborda.controller.dto.ResolveLinkDto;
import com.itaborda.controller.dto.VisitStateDto;
import com.itaborda.service.ShortUrlService;
import com.itaborda.util.Utility;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.UnknownHostException;

/**
 * REST controller for managing url shortening , expansion and statistics Operation.
 *
 * @author MohammadReza Alagheband
 */
@RestController
@RequestMapping("/api/v1")
@Api(value = "Shortener URL")
public class ShortUrlController {

	private ShortUrlService shortUrlService;

	public ShortUrlController(ShortUrlService shortUrlService) {
		this.shortUrlService = shortUrlService;
	}

	/**
	 * Get /:key  taking already generated short Url, redirect user to the corresponding long url
	 *
	 * @param key      shortUrl provided by user
	 * @param request  it is used to extract browser and os information of analytics
	 * @param response it is used to redirect user to the appropriate long url
	 * @throws KeyNotFoundException    if the provided shortUrl is not available in the DB
	 * @throws InvalidAddressException if the key (or short url) is empty or null
	 */
	@GetMapping("/{key}")
	@ApiOperation(value = "Get and redirect to shortened url")
	public void expandingUrl(@PathVariable String key, HttpServletRequest request, HttpServletResponse response) throws KeyNotFoundException, InvalidAddressException {

		ResolveLinkDto dto = new ResolveLinkDto();
		dto.setBrowser(Utility.getBrowserType(request));
		dto.setOs(Utility.getOperatingSystemType(request));
		dto.setShortUrl(key);

		String longUrl = shortUrlService.resolve(dto).getLongUrl();

		response.setHeader("Location", longUrl);
		response.setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);
	}

	/**
	 * POST /shortify        longurl will be posted to this endpoint that corresponding short url be generated
	 * and returned
	 *
	 * @param dto a container to hold the provided long url
	 * @return Output the generated short url in the message item of the json.
	 * @throws MalformedURLException if the format of the provided url is not valid
	 * @throws UnknownHostException  if the system requesting, does not have proper hostname
	 * @throws KeyOverFlowException  if the system has exhausted the maximum amount of counters
	 */
	@PostMapping("/shortify")
	@ApiOperation(value = "Shortify a long url")
	public ResponseEntity<BaseResponse> assignNewKey(@RequestBody NewLinkDto dto) throws MalformedURLException, UnknownHostException, KeyOverFlowException, URISyntaxException {

		String key = shortUrlService.shorten(dto);
		return ResponseEntity.created(new URI("/" + key)).body(new BaseResponse(true, key, BaseResponse.SUCCESSFUL));
	}

	/**
	 * GET /stat/:key   stat will be calculated and returned
	 *
	 * @param key short url that already generated by the service.
	 * @return Output the calculated statistics gathered by the service.
	 * @throws KeyNotFoundException if the provided shortUrl is not available in the DB
	 */
	@GetMapping("/stat/{key}")
	@ApiOperation(value = "Get shortened url statistcs")
	public ResponseEntity<BaseResponse> getStats(@PathVariable String key) throws KeyNotFoundException {
		VisitStateDto dto = shortUrlService.getVisitStateByKey(key);
		return ResponseEntity.ok().body(dto);
	}

}
